package tk.davinctor.app_with_datalayer.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tk.davinctor.app_with_datalayer.database.DaoSession;

import tk.davinctor.app_with_datalayer.database.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ServerId = new Property(2, long.class, "serverId", false, "SERVER_ID");
        public final static Property LikeCount = new Property(3, Integer.class, "likeCount", false, "LIKE_COUNT");
        public final static Property ShortTypeColumn = new Property(4, Short.class, "shortTypeColumn", false, "SHORT_TYPE_COLUMN");
        public final static Property BytePropertyColumn = new Property(5, Byte.class, "bytePropertyColumn", false, "BYTE_PROPERTY_COLUMN");
        public final static Property SalaryFloat = new Property(6, Float.class, "salaryFloat", false, "SALARY_FLOAT");
        public final static Property SalaryDouble = new Property(7, Double.class, "salaryDouble", false, "SALARY_DOUBLE");
        public final static Property IsAdmin = new Property(8, Boolean.class, "isAdmin", false, "IS_ADMIN");
        public final static Property Birthday = new Property(9, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property UserPhoto = new Property(10, byte[].class, "userPhoto", false, "USER_PHOTO");
        public final static Property JavaDocSample = new Property(11, String.class, "javaDocSample", false, "JAVA_DOC_SAMPLE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SERVER_ID\" INTEGER NOT NULL UNIQUE ," + // 2: serverId
                "\"LIKE_COUNT\" INTEGER," + // 3: likeCount
                "\"SHORT_TYPE_COLUMN\" INTEGER," + // 4: shortTypeColumn
                "\"BYTE_PROPERTY_COLUMN\" INTEGER," + // 5: bytePropertyColumn
                "\"SALARY_FLOAT\" REAL," + // 6: salaryFloat
                "\"SALARY_DOUBLE\" REAL," + // 7: salaryDouble
                "\"IS_ADMIN\" INTEGER," + // 8: isAdmin
                "\"BIRTHDAY\" INTEGER," + // 9: birthday
                "\"USER_PHOTO\" BLOB," + // 10: userPhoto
                "\"JAVA_DOC_SAMPLE\" TEXT);"); // 11: javaDocSample
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getServerId());
 
        Integer likeCount = entity.getLikeCount();
        if (likeCount != null) {
            stmt.bindLong(4, likeCount);
        }
 
        Short shortTypeColumn = entity.getShortTypeColumn();
        if (shortTypeColumn != null) {
            stmt.bindLong(5, shortTypeColumn);
        }
 
        Byte bytePropertyColumn = entity.getBytePropertyColumn();
        if (bytePropertyColumn != null) {
            stmt.bindLong(6, bytePropertyColumn);
        }
 
        Float salaryFloat = entity.getSalaryFloat();
        if (salaryFloat != null) {
            stmt.bindDouble(7, salaryFloat);
        }
 
        Double salaryDouble = entity.getSalaryDouble();
        if (salaryDouble != null) {
            stmt.bindDouble(8, salaryDouble);
        }
 
        Boolean isAdmin = entity.getIsAdmin();
        if (isAdmin != null) {
            stmt.bindLong(9, isAdmin ? 1L: 0L);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(10, birthday.getTime());
        }
 
        byte[] userPhoto = entity.getUserPhoto();
        if (userPhoto != null) {
            stmt.bindBlob(11, userPhoto);
        }
 
        String javaDocSample = entity.getJavaDocSample();
        if (javaDocSample != null) {
            stmt.bindString(12, javaDocSample);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2), // serverId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // likeCount
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // shortTypeColumn
            cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5), // bytePropertyColumn
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // salaryFloat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // salaryDouble
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isAdmin
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // userPhoto
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // javaDocSample
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServerId(cursor.getLong(offset + 2));
        entity.setLikeCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setShortTypeColumn(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setBytePropertyColumn(cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5));
        entity.setSalaryFloat(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setSalaryDouble(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setIsAdmin(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setBirthday(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUserPhoto(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setJavaDocSample(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
